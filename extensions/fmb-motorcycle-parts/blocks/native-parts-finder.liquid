{% comment %}
  FMB Native Motorcycle Parts Finder
  
  This block renders natively within the Shopify theme and handles:
  - Main finder page at /pages/fit-my-bike
  - Specific motorcycle pages at /pages/fit-my-bike?bikeid=1001
{% endcomment %}

{%- liquid
  assign block_id = block.id
  assign api_base_url = block.settings.api_base_url
  assign widget_title = block.settings.widget_title | default: 'Find Your Motorcycle Parts'
  assign show_header = block.settings.show_header | default: true
  assign auto_detect_page = block.settings.auto_detect_page | default: true
  assign color_scheme = block.settings.color_scheme | default: 'background-1'
-%}

{{ 'fmb-motorcycle-parts-finder.css' | asset_url | stylesheet_tag }}

<div class="color-{{ color_scheme }}" data-fmb="{{ block_id }}" id="fmb-native-finder-{{ block_id }}" {{ block.shopify_attributes }}>
<div class="fmb-native-parts-finder">
  {% if show_header %}
    <div class="fmb-native-header">
      {% if widget_title != blank %}
        <h1 class="fmb-native-title">{{ widget_title }}</h1>
      {% endif %}
      {% if block.settings.widget_description != blank %}
        <p class="fmb-native-description">{{ block.settings.widget_description }}</p>
      {% endif %}
    </div>
  {% endif %}

  <div class="fmb-native-content" id="fmb-native-content-{{ block_id }}">
    <div class="fmb-native-loading">
      <div class="fmb-loading-spinner"></div>
      <p>Loading motorcycle parts finder...</p>
    </div>
  </div>
</div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const blockId = '{{ block_id }}';
    const containerId = 'fmb-native-content-' + blockId;
    const container = document.getElementById(containerId);
    
    if (!container) return;

    const config = {
      apiBaseUrl: '/apps/fit-my-bike',
      shopDomain: window.Shopify?.shop || '{{ shop.permanent_domain }}',
      autoDetectPage: {{ auto_detect_page }},
      blockId: blockId
    };

    // Helper function to map biketype numbers to labels
    function getBikeTypeLabel(biketype) {
      const bikeTypeMap = {
        1: 'ON ROAD',
        2: 'OFF ROAD',
        3: 'SUPERMOTO',
        4: 'ENDURO',
        5: 'MOTOCROSS'
      };
      return bikeTypeMap[biketype] || 'OFF ROAD';
    }

    // Check if we're on a fit-my-bike page and extract bikeid
    const currentPath = window.location.pathname;
    const urlParams = new URLSearchParams(window.location.search);
    const bikeid = urlParams.get('bikeid');
    
    let pageType = 'finder';
    if (currentPath.includes('/pages/fit-my-bike') || currentPath.includes('/fit-my-bike')) {
      pageType = bikeid ? 'motorcycle-parts' : 'finder';
    }

    // Initialize the appropriate widget
    if (pageType === 'motorcycle-parts' && bikeid) {
      initializeMotorcyclePage(config, bikeid, container);
    } else {
      initializeFinderPage(config, container);
    }

    function initializeFinderPage(config, container) {
      // Load the main motorcycle finder
      fetch(`${config.apiBaseUrl}/api/motorcycles/makes`, { 
        cache: 'no-store', 
        headers: { 'Cache-Control': 'no-cache' } 
      })
        .then(response => {
          if (response.status === 304) {
            // Handle 304 Not Modified - try again with cache reload
            return fetch(`${config.apiBaseUrl}/api/motorcycles/makes`, { cache: 'reload' }).then(r => r.json());
          }
          if (!response.ok) {
            throw new Error(`Finder API failed with status ${response.status}`);
          }
          return response.json();
        })
        .then(makes => {
          container.innerHTML = generateFinderHTML(makes, config);
          setupFinderInteractions(config, container);
        })
        .catch(error => {
          console.error('Error loading finder:', error);
          container.innerHTML = `
            <div class="fmb-native-error">
              <p>Unable to load motorcycle finder. Please try again later.</p>
            </div>
          `;
        });
    }

    function initializeMotorcyclePage(config, bikeid, container) {
      console.log('üîß FMB Debug: Starting motorcycle page initialization');
      console.log('üîß FMB Debug: bikeid =', bikeid);
      console.log('üîß FMB Debug: apiBaseUrl =', config.apiBaseUrl);

      // Show debug info in container
      container.innerHTML = `
        <div style="background: #f8f9fa; border: 1px solid #dee2e6; padding: 15px; margin: 10px 0; font-family: monospace; font-size: 12px;">
          <strong>üîß FMB Debug Info:</strong><br>
          ‚Ä¢ bikeid: ${bikeid}<br>
          ‚Ä¢ apiBaseUrl: ${config.apiBaseUrl}<br>
          ‚Ä¢ About to call APIs...<br>
        </div>
        <div class="fmb-native-loading">
          <div class="fmb-loading-spinner"></div>
          <p>Loading motorcycle parts...</p>
        </div>
      `;
      
      const url1 = `${config.apiBaseUrl}/api/motorcycles?recid=${bikeid}`;
      const url2 = `${config.apiBaseUrl}/api/customer/motorcycles/${bikeid}/compatible-parts`;
      
      console.log('üîß FMB Debug: Fetching URLs:', url1, url2);
      
      // Load specific motorcycle data and compatible parts directly
      Promise.all([
        fetch(url1, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        }).then(r => {
          console.log('üîß FMB Debug: Motorcycle API response status:', r.status);
          if (r.status === 304) {
            // Handle 304 Not Modified - try again with cache reload
            return fetch(url1, { cache: 'reload' }).then(rr => rr.json());
          }
          if (!r.ok) {
            throw new Error(`Motorcycle API failed with status ${r.status}`);
          }
          return r.json();
        }),
        fetch(url2, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        }).then(r => {
          console.log('üîß FMB Debug: Parts API response status:', r.status);
          if (r.status === 304) {
            // Handle 304 Not Modified - try again with cache reload
            return fetch(url2, { cache: 'reload' }).then(rr => rr.json());
          }
          if (!r.ok) {
            throw new Error(`Parts API failed with status ${r.status}`);
          }
          return r.json();
        })
      ])
      .then(([motorcycles, parts]) => {
        console.log('üîß FMB Debug: Received motorcycles:', motorcycles);
        console.log('üîß FMB Debug: Received parts:', parts);
        console.log('üîß FMB Debug: Motorcycles type:', typeof motorcycles, 'Length:', Array.isArray(motorcycles) ? motorcycles.length : 'not array');
        console.log('üîß FMB Debug: Parts type:', typeof parts, 'Length:', Array.isArray(parts) ? parts.length : 'not array');

        // Update debug display
        container.querySelector('.fmb-native-loading').innerHTML = `
          <div style="background: #d4edda; border: 1px solid #c3e6cb; padding: 10px; margin: 5px 0; font-family: monospace; font-size: 11px;">
            ‚úÖ <strong>API Success!</strong><br>
            ‚Ä¢ Motorcycles: ${Array.isArray(motorcycles) ? motorcycles.length : 'Invalid'}<br>
            ‚Ä¢ Parts: ${Array.isArray(parts) ? parts.length : 'Invalid'}<br>
            ‚Ä¢ Rendering layout...<br>
          </div>
        `;
        
        const motorcycle = motorcycles.find(m => m.recid == bikeid);
        console.log('üîß FMB Debug: Found motorcycle:', motorcycle);
        if (!motorcycle) {
          throw new Error(`Motorcycle with bikeid ${bikeid} not found`);
        }
        
        updateSEOForMotorcycle(motorcycle, parts, bikeid);
        
        container.innerHTML = generateMotorcyclePageHTML(motorcycle, parts, config);
        setupPartInteractions(config, container);
      })
      .catch(error => {
        console.error('Error loading motorcycle page:', error);
        container.innerHTML = `
          <div style="background: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; margin: 10px 0;">
            <strong>‚ùå FMB Debug Error:</strong><br>
            <div style="font-family: monospace; font-size: 12px; margin-top: 10px;">
              Error: ${error.message}<br>
              Stack: ${error.stack ? error.stack.substring(0, 200) + '...' : 'No stack trace'}
            </div>
            <hr style="margin: 10px 0;">
            <p>Unable to load motorcycle parts. Please try again later.</p>
          </div>
        `;
      });
    }

    function updateSEOForMotorcycle(motorcycle, parts, bikeid) {
      // Generate dynamic page title
      const bikeYear = motorcycle.firstyear && motorcycle.lastyear 
        ? (motorcycle.firstyear === motorcycle.lastyear 
            ? motorcycle.firstyear.toString() 
            : `${motorcycle.firstyear}-${motorcycle.lastyear}`)
        : motorcycle.bikeyear || 'Unknown Year';
      
      const pageTitle = `${motorcycle.bikemake} ${motorcycle.bikemodel} ${bikeYear} Motorcycle Parts | Renthal`;
      document.title = pageTitle;
      
      // Update meta description
      const existingMeta = document.querySelector('meta[name="description"]');
      const metaContent = `Find compatible motorcycle parts for ${motorcycle.bikemake} ${motorcycle.bikemodel} (${bikeYear}). ${parts.length} parts available including sprockets, chains, handlebars and more.`;
      
      if (existingMeta) {
        existingMeta.setAttribute('content', metaContent);
      } else {
        const meta = document.createElement('meta');
        meta.name = 'description';
        meta.content = metaContent;
        document.head.appendChild(meta);
      }
      
      // Update Open Graph tags
      updateOpenGraphTag('og:title', pageTitle);
      updateOpenGraphTag('og:description', metaContent);
      updateOpenGraphTag('og:url', window.location.href);
      
      // Add structured data for better SEO
      const structuredData = {
        "@context": "https://schema.org",
        "@type": "Product",
        "name": `${motorcycle.bikemake} ${motorcycle.bikemodel} ${bikeYear}`,
        "description": metaContent,
        "category": "Motorcycle Parts",
        "brand": {
          "@type": "Brand",
          "name": motorcycle.bikemake
        },
        "offers": {
          "@type": "AggregateOffer",
          "offerCount": parts.length,
          "priceCurrency": "GBP"
        }
      };
      
      const existingScript = document.getElementById('motorcycle-structured-data');
      if (existingScript) {
        existingScript.textContent = JSON.stringify(structuredData);
      } else {
        const script = document.createElement('script');
        script.type = 'application/ld+json';
        script.id = 'motorcycle-structured-data';
        script.textContent = JSON.stringify(structuredData);
        document.head.appendChild(script);
      }
    }
    
    function updateOpenGraphTag(property, content) {
      const existing = document.querySelector(`meta[property="${property}"]`);
      if (existing) {
        existing.setAttribute('content', content);
      } else {
        const meta = document.createElement('meta');
        meta.setAttribute('property', property);
        meta.setAttribute('content', content);
        document.head.appendChild(meta);
      }
    }

    function generateFinderHTML(makes, config) {
      return `
        <div class="fmb-finder-form">
          <!-- Quick Search Section -->
          <div class="fmb-quick-search">
            <h3>Quick Search</h3>
            <p>Search directly for your motorcycle model</p>
            <div class="fmb-search-input-group">
              <input type="text" id="quick-search-${config.blockId}" class="fmb-search-input" 
                     placeholder="e.g., Honda CRF450R 2023" 
                     autocomplete="off">
              <div id="suggestions-dropdown-${config.blockId}" class="fmb-suggestions-dropdown"></div>
            </div>
          </div>
          
          <!-- Filter Search Section -->
          <h3>Search by Make, Model & Year</h3>
          <p style="color: inherit; opacity: 0.7; margin-bottom: 1.5rem; font-size: 1rem;">Select options in order: Make ‚Üí Model ‚Üí Year</p>
          <div class="fmb-form-grid">
            <div class="fmb-form-group">
              <label for="make-select-${config.blockId}">1. Make</label>
              <select id="make-select-${config.blockId}" class="fmb-select">
                <option value="">Choose your bike make</option>
                ${makes.map(make => `<option value="${make}">${make}</option>`).join('')}
              </select>
            </div>
            
            <div class="fmb-form-group disabled">
              <label for="model-select-${config.blockId}">2. Model</label>
              <select id="model-select-${config.blockId}" class="fmb-select" disabled>
                <option value="">First select a make</option>
              </select>
            </div>
            
            <div class="fmb-form-group disabled">
              <label for="year-select-${config.blockId}">3. Year</label>
              <select id="year-select-${config.blockId}" class="fmb-select" disabled>
                <option value="">First select make & model</option>
              </select>
            </div>
          </div>
          
          <div id="results-${config.blockId}" class="fmb-finder-results"></div>
        </div>
      `;
    }

    function generateMotorcyclePageHTML(motorcycle, parts, config) {
      // Calculate year range  
      const bikeYear = motorcycle.firstyear && motorcycle.lastyear 
        ? (motorcycle.firstyear === motorcycle.lastyear 
            ? motorcycle.firstyear.toString() 
            : `${motorcycle.firstyear}-${motorcycle.lastyear}`)
        : motorcycle.bikeyear || 'Unknown Year';
      
      const engineSize = motorcycle.bikeengine ? `${motorcycle.bikeengine}cc` : '';
      
      // Generate navigation menu
      const navigationMenu = `
        <div class="fmb-navigation" style="background: #f8f9fa; padding: 10px; margin: 15px 0; border-radius: 5px;">
          <nav style="display: flex; flex-wrap: wrap; gap: 15px; justify-content: center;">
            <a href="#front-sprockets" style="text-decoration: none; color: #333; font-weight: 500;">Front Sprockets</a>
            <a href="#rear-sprockets" style="text-decoration: none; color: #333; font-weight: 500;">Rear Sprockets</a>
            <a href="#chains" style="text-decoration: none; color: #333; font-weight: 500;">Chains</a>
            <a href="#handlebars" style="text-decoration: none; color: #333; font-weight: 500;">Handlebars</a>
            <a href="#grips" style="text-decoration: none; color: #333; font-weight: 500;">Grips</a>
            <a href="#accessories" style="text-decoration: none; color: #333; font-weight: 500;">Accessories</a>
          </nav>
        </div>
      `;
      
      // Filter and categorize parts
      const categorizedParts = categorizeParts(parts);
      
      return `
        <div class="fmb-motorcycle-page">
          <div class="fmb-motorcycle-header">
            <h1>${motorcycle.bikemake} ${motorcycle.bikemodel} (${getBikeTypeLabel(motorcycle.biketype)}) ${bikeYear}</h1>
            <a href="/pages/fit-my-bike" class="fmb-back-link">‚Üê Fit My Bike</a>
          </div>
          
          ${navigationMenu}
          
          <div class="fmb-parts-content">
            ${generateDirectReplacementSection(categorizedParts)}
            ${generateCategorySection('front-sprockets', 'Front Sprockets', categorizedParts.frontSprockets)}
            ${generateCategorySection('rear-sprockets', 'Rear Sprockets', categorizedParts.rearSprockets)}
            ${generateCategorySection('chains', 'Chains', categorizedParts.chains)}
            ${generateCategorySection('handlebars', 'Handlebars', categorizedParts.handlebars)}
            ${generateCategorySection('grips', 'Grips', categorizedParts.grips)}
            ${generateCategorySection('accessories', 'Accessories', categorizedParts.accessories)}
          </div>
        </div>
      `;
    }
    
    function categorizeParts(parts) {
      const categorized = {
        frontSprockets: [],
        rearSprockets: [],
        chains: [],
        handlebars: [],
        grips: [],
        accessories: []
      };
      
      parts.forEach(part => {
        const title = part.title.toLowerCase();
        
        if (title.includes('front') && title.includes('sprocket')) {
          categorized.frontSprockets.push(part);
        } else if (title.includes('rear') && title.includes('sprocket')) {
          categorized.rearSprockets.push(part);
        } else if (title.includes('sprocket')) {
          // If not specifically front or rear, try to categorize by part number
          if (part.sku && part.sku.includes('292')) {
            categorized.frontSprockets.push(part);
          } else {
            categorized.rearSprockets.push(part);
          }
        } else if (title.includes('chain')) {
          categorized.chains.push(part);
        } else if (title.includes('handlebar') || title.includes('bar')) {
          categorized.handlebars.push(part);
        } else if (title.includes('grip')) {
          categorized.grips.push(part);
        } else {
          categorized.accessories.push(part);
        }
      });
      
      return categorized;
    }
    
    function generateDirectReplacementSection(categorizedParts) {
      const allParts = [
        ...categorizedParts.frontSprockets,
        ...categorizedParts.rearSprockets,
        ...categorizedParts.chains,
        ...categorizedParts.handlebars,
        ...categorizedParts.grips,
        ...categorizedParts.accessories
      ];
      
      if (allParts.length === 0) {
        return '<div class="fmb-no-parts"><p>No compatible parts found for this motorcycle.</p></div>';
      }
      
      return `
        <div class="fmb-direct-replacement">
          <h2>Direct Replacement</h2>
          <div class="fmb-parts-table">
            <table style="width: 100%; border-collapse: collapse; margin: 20px 0;">
              <thead>
                <tr style="background: #f8f9fa; border-bottom: 2px solid #dee2e6;">
                  <th style="padding: 12px; text-align: left; border: 1px solid #dee2e6;">Part Number</th>
                  <th style="padding: 12px; text-align: left; border: 1px solid #dee2e6;">Description</th>
                  <th style="padding: 12px; text-align: right; border: 1px solid #dee2e6;">Price</th>
                  <th style="padding: 12px; text-align: center; border: 1px solid #dee2e6;">Action</th>
                </tr>
              </thead>
              <tbody>
                ${allParts.map(part => `
                  <tr style="border-bottom: 1px solid #dee2e6;">
                    <td style="padding: 12px; border: 1px solid #dee2e6; font-weight: 500;">${part.sku}</td>
                    <td style="padding: 12px; border: 1px solid #dee2e6;">
                      <div>
                        <a href="${part.url}" style="color: #007bff; text-decoration: none; font-weight: 500;">${part.title}</a>
                      </div>
                    </td>
                    <td style="padding: 12px; border: 1px solid #dee2e6; text-align: right; font-weight: 500;">¬£${part.price}</td>
                    <td style="padding: 12px; border: 1px solid #dee2e6; text-align: center;">
                      <button class="fmb-add-to-cart-btn" 
                              data-variant-id="${part.variants[0]?.id}" 
                              style="background: #28a745; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; font-size: 14px;">
                        Add to Cart
                      </button>
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
        </div>
      `;
    }
    
    function generateCategorySection(id, title, parts) {
      if (parts.length === 0) return '';
      
      return `
        <div id="${id}" class="fmb-category-section">
          <h3>${title}</h3>
          <div class="fmb-parts-grid">
            ${parts.map(part => `
              <div class="fmb-part-card" style="border: 1px solid #dee2e6; border-radius: 8px; padding: 15px; margin: 10px 0;">
                <h4><a href="${part.url}" style="color: #007bff; text-decoration: none;">${part.title}</a></h4>
                <p><strong>SKU:</strong> ${part.sku}</p>
                <p><strong>Price:</strong> ¬£${part.price}</p>
                <button class="fmb-add-to-cart-btn" 
                        data-variant-id="${part.variants[0]?.id}"
                        style="background: #007bff; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer;">
                  Add to Cart
                </button>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    function searchMotorcycles(motorcycleData, query) {
      const searchTerm = query.toLowerCase().trim();
      if (!searchTerm) return [];
      
      // Check if it's a direct RECID search
      if (/^\d+$/.test(searchTerm)) {
        const recid = parseInt(searchTerm);
        const directMatch = motorcycleData.find(bike => bike.recid === recid);
        if (directMatch) return [directMatch];
      }
      
      // Split search into words for multi-word matching
      const words = searchTerm.split(/\s+/).filter(word => word.length > 0);
      if (words.length === 0) return [];
      
      return motorcycleData.filter(bike => {
        // Normalize spaces for better matching (handles "rm100" matching "RM 100")
        const normalizedMake = bike.bikemake.toLowerCase().replace(/\s+/g, '');
        const normalizedModel = bike.bikemodel.toLowerCase().replace(/\s+/g, '');
        const normalizedSearchTerm = searchTerm.replace(/\s+/g, '');
        
        // Direct normalized match (for cases like "rm100" vs "RM 100")
        if (normalizedMake.includes(normalizedSearchTerm) || normalizedModel.includes(normalizedSearchTerm)) {
          return true;
        }
        
        // Multi-word search: all words must match some part of the bike info
        return words.every(word => {
          return bike.bikemake.toLowerCase().includes(word) ||
                 bike.bikemodel.toLowerCase().includes(word) ||
                 (bike.bikeyear && bike.bikeyear.toString().includes(word)) ||
                 (bike.firstyear && bike.firstyear.toString().includes(word)) ||
                 (bike.lastyear && bike.lastyear.toString().includes(word)) ||
                 (bike.bikeengine && bike.bikeengine.toString().includes(word));
        });
      }).sort((a, b) => {
        // Sort by relevance: exact matches first, then by make/model
        const aRelevance = getSearchRelevance(a, searchTerm);
        const bRelevance = getSearchRelevance(b, searchTerm);
        if (aRelevance !== bRelevance) return bRelevance - aRelevance;
        
        // Secondary sort by make, then model, then year
        if (a.bikemake !== b.bikemake) return a.bikemake.localeCompare(b.bikemake);
        if (a.bikemodel !== b.bikemodel) return a.bikemodel.localeCompare(b.bikemodel);
        return (b.firstyear || b.bikeyear || 0) - (a.firstyear || a.bikeyear || 0);
      });
    }
    
    function getSearchRelevance(bike, searchTerm) {
      const make = bike.bikemake.toLowerCase();
      const model = bike.bikemodel.toLowerCase();
      const term = searchTerm.toLowerCase();
      
      // Exact make + model match = highest relevance
      if (`${make} ${model}`.includes(term)) return 3;
      
      // Make or model starts with term = high relevance  
      if (make.startsWith(term) || model.startsWith(term)) return 2;
      
      // Make or model contains term = medium relevance
      if (make.includes(term) || model.includes(term)) return 1;
      
      // Any other match = low relevance
      return 0;
    }

    function setupFinderInteractions(config, container) {
      const quickSearch = container.querySelector(`#quick-search-${config.blockId}`);
      const suggestionsDropdown = container.querySelector(`#suggestions-dropdown-${config.blockId}`);
      const makeSelect = container.querySelector(`#make-select-${config.blockId}`);
      const modelSelect = container.querySelector(`#model-select-${config.blockId}`);
      const yearSelect = container.querySelector(`#year-select-${config.blockId}`);
      const results = container.querySelector(`#results-${config.blockId}`);

      let motorcycleData = [];

      // Load all motorcycle data for quick search
      fetch(`${config.apiBaseUrl}/api/motorcycles`, { 
        cache: 'no-store', 
        headers: { 'Cache-Control': 'no-cache' } 
      })
        .then(response => response.json())
        .then(motorcycles => {
          motorcycleData = motorcycles;
        })
        .catch(error => console.error('Error loading motorcycles:', error));

      // Quick search functionality
      let searchTimeout;
      quickSearch.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();
        
        if (query.length < 2) {
          suggestionsDropdown.style.display = 'none';
          return;
        }
        
        searchTimeout = setTimeout(() => {
          const matches = searchMotorcycles(motorcycleData, query).slice(0, 10);
          
          if (matches.length > 0) {
            suggestionsDropdown.innerHTML = matches.map(bike => {
              const yearRange = bike.firstyear === bike.lastyear ? 
                bike.firstyear : 
                `${bike.firstyear}-${bike.lastyear}`;
              return `<div class="fmb-suggestion-item" data-bikeid="${bike.recid}">
                ${bike.bikemake} ${bike.bikemodel} (${yearRange})
              </div>`;
            }).join('');
            suggestionsDropdown.style.display = 'block';
          } else {
            suggestionsDropdown.style.display = 'none';
          }
        }, 300);
      });

      // Handle suggestion clicks
      suggestionsDropdown.addEventListener('click', function(e) {
        if (e.target.classList.contains('fmb-suggestion-item')) {
          const bikeid = e.target.getAttribute('data-bikeid');
          window.location.href = `/pages/fit-my-bike?bikeid=${bikeid}`;
        }
      });

      // Hide suggestions when clicking outside
      document.addEventListener('click', function(e) {
        if (!quickSearch.contains(e.target) && !suggestionsDropdown.contains(e.target)) {
          suggestionsDropdown.style.display = 'none';
        }
      });

      // Make selection handler
      makeSelect.addEventListener('change', function() {
        const selectedMake = this.value;
        modelSelect.disabled = true;
        yearSelect.disabled = true;
        modelSelect.innerHTML = '<option value="">Choose your bike model</option>';
        yearSelect.innerHTML = '<option value="">Choose your bike year</option>';
        results.innerHTML = '';

        if (!selectedMake) return;

        fetch(`${config.apiBaseUrl}/api/proxy/search-data?type=models&make=${encodeURIComponent(selectedMake)}`, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        })
          .then(response => response.json())
          .then(models => {
            models.forEach(model => {
              const option = document.createElement('option');
              option.value = model;
              option.textContent = model;
              modelSelect.appendChild(option);
            });
            modelSelect.disabled = false;
          })
          .catch(error => {
            console.error('Error loading models:', error);
            modelSelect.innerHTML = '<option value="">Error loading models</option>';
          });
      });

      // Model selection handler
      modelSelect.addEventListener('change', function() {
        const selectedMake = makeSelect.value;
        const selectedModel = this.value;
        yearSelect.disabled = true;
        yearSelect.innerHTML = '<option value="">Choose your bike year</option>';
        results.innerHTML = '';

        if (!selectedMake || !selectedModel) return;

        fetch(`${config.apiBaseUrl}/api/proxy/search-data?type=years&make=${encodeURIComponent(selectedMake)}&model=${encodeURIComponent(selectedModel)}`, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        })
          .then(response => response.json())
          .then(years => {
            years.forEach(year => {
              const option = document.createElement('option');
              option.value = year;
              option.textContent = year;
              yearSelect.appendChild(option);
            });
            yearSelect.disabled = false;
          })
          .catch(error => {
            console.error('Error loading years:', error);
            yearSelect.innerHTML = '<option value="">Error loading years</option>';
          });
      });

      // Year selection handler - show results
      yearSelect.addEventListener('change', function() {
        const selectedMake = makeSelect.value;
        const selectedModel = modelSelect.value;
        const selectedYear = this.value;

        if (!selectedMake || !selectedModel || !selectedYear) {
          results.innerHTML = '';
          return;
        }

        results.innerHTML = '<div class="fmb-loading"><p>Finding your motorcycle...</p></div>';

        fetch(`${config.apiBaseUrl}/api/motorcycles/search?make=${selectedMake}&model=${selectedModel}&year=${selectedYear}`, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        })
          .then(response => response.json())
          .then(motorcycles => {
            if (motorcycles.length === 0) {
              results.innerHTML = '<div class="fmb-no-results"><p>No motorcycles found for this combination.</p></div>';
              return;
            }

            results.innerHTML = `
              <div class="fmb-results-section">
                <h3>Found ${motorcycles.length} motorcycle${motorcycles.length > 1 ? 's' : ''}</h3>
                <div class="fmb-motorcycle-list">
                  ${motorcycles.map(bike => {
                    const yearRange = bike.firstyear === bike.lastyear ? 
                      bike.firstyear : 
                      `${bike.firstyear}-${bike.lastyear}`;
                    return `
                      <div class="fmb-motorcycle-result">
                        <h4>${bike.bikemake} ${bike.bikemodel}</h4>
                        <p>Year: ${yearRange}</p>
                        ${bike.bikeengine ? `<p>Engine: ${bike.bikeengine}cc</p>` : ''}
                        <a href="/pages/fit-my-bike?bikeid=${bike.recid}" class="fmb-view-parts-btn">View Compatible Parts</a>
                      </div>
                    `;
                  }).join('')}
                </div>
              </div>
            `;
          })
          .catch(error => {
            console.error('Error finding motorcycles:', error);
            results.innerHTML = '<div class="fmb-error"><p>Error finding motorcycles. Please try again.</p></div>';
          });
      });
    }

    function setupPartInteractions(config, container) {
      // Handle add to cart buttons
      container.addEventListener('click', function(e) {
        const addToCartBtn = e.target.closest('.fmb-add-to-cart-btn');
        if (!addToCartBtn) return;

        const variantId = addToCartBtn.getAttribute('data-variant-id');
        if (!variantId) {
          console.error('No variant ID found for add to cart button');
          return;
        }

        // Disable button and show loading state
        addToCartBtn.disabled = true;
        const originalText = addToCartBtn.textContent;
        addToCartBtn.textContent = 'Adding...';

        // Add to cart via Shopify Cart API
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1
          })
        })
        .then(response => response.json())
        .then(data => {
          addToCartBtn.textContent = 'Added!';
          addToCartBtn.style.background = '#28a745';
          
          // Trigger cart refresh events
          if (window.Shopify && window.Shopify.onItemAdded) {
            window.Shopify.onItemAdded();
          }
          
          // Dispatch custom event for theme integrations
          window.dispatchEvent(new CustomEvent('cart:item-added', {
            detail: { variant_id: variantId, quantity: 1 }
          }));
          
          // Reset button after 2 seconds
          setTimeout(() => {
            addToCartBtn.textContent = originalText;
            addToCartBtn.disabled = false;
            addToCartBtn.style.background = '';
          }, 2000);
        })
        .catch(error => {
          console.error('Error adding to cart:', error);
          addToCartBtn.disabled = false;
          addToCartBtn.textContent = 'Error - Try Again';
          addToCartBtn.style.background = '#dc3545';
          
          // Reset button after 3 seconds
          setTimeout(() => {
            addToCartBtn.textContent = originalText;
            addToCartBtn.style.background = '';
          }, 3000);
        });
      });
      
      // Handle navigation menu smooth scrolling
      container.addEventListener('click', function(e) {
        if (e.target.closest('.fmb-navigation a[href^="#"]')) {
          e.preventDefault();
          const targetId = e.target.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth' });
          }
        }
      });
    }
  });
</script>

{% schema %}
{
  "name": "Native Bike Parts Finder",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Content Settings"
    },
    {
      "type": "text",
      "id": "widget_title",
      "label": "Widget Title",
      "default": "Find Your Motorcycle Parts"
    },
    {
      "type": "textarea",
      "id": "widget_description",
      "label": "Widget Description",
      "default": "Search for compatible parts for your motorcycle"
    },
    {
      "type": "checkbox",
      "id": "show_header",
      "label": "Show Header",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "auto_detect_page",
      "label": "Auto-detect Page Type",
      "info": "Automatically detect if this is a finder or parts page based on URL parameters",
      "default": true
    },
    {
      "type": "header",
      "content": "Configuration"
    },
    {
      "type": "url",
      "id": "api_base_url",
      "label": "API Base URL",
      "info": "Leave blank to use app proxy automatically"
    }
  ]
}
{% endschema %}