{% comment %}
  FMB Native Motorcycle Parts Finder
  
  This block renders natively within the Shopify theme and handles:
  - Main finder page at /pages/fit-my-bike
  - Specific motorcycle pages at /pages/fit-my-bike/?bikeid=1001
{% endcomment %}

{%- liquid
  assign block_id = block.id
  assign api_base_url = block.settings.api_base_url
  assign widget_title = block.settings.widget_title | default: 'Find Your Motorcycle Parts'
  assign show_header = block.settings.show_header | default: true
  assign auto_detect_page = block.settings.auto_detect_page | default: true
  assign color_scheme = block.settings.color_scheme | default: 'background-1'
-%}

{{ 'fmb-motorcycle-parts-finder.css' | asset_url | stylesheet_tag }}

<div class="color-{{ color_scheme }}" data-fmb="{{ block_id }}" id="fmb-native-finder-{{ block_id }}" {{ block.shopify_attributes }}>
  <div class="fmb-native-parts-finder">
    <div class="fmb-native-content" id="fmb-native-content-{{ block_id }}">
      <div class="fmb-native-loading">
        <div class="fmb-loading-spinner"></div>
        <p>Loading motorcycle parts finder...</p>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const blockId = '{{ block_id }}';
    const containerId = 'fmb-native-content-' + blockId;
    const container = document.getElementById(containerId);
    
    if (!container) return;

    const config = {
      apiBaseUrl: '/apps/fit-my-bike',
      shopDomain: window.Shopify?.shop || '{{ shop.permanent_domain }}',
      autoDetectPage: {{ auto_detect_page }},
      blockId: blockId
    };

    // Helper function to map biketype numbers to labels
    function getBikeTypeLabel(biketype) {
      const bikeTypeMap = {
        1: 'ON ROAD',
        2: 'OFF ROAD',
        3: 'SUPERMOTO',
        4: 'ENDURO',
        5: 'MOTOCROSS'
      };
      return bikeTypeMap[biketype] || 'OFF ROAD';
    }

    // Check if we're on a fit-my-bike page and extract bikeid
    const currentPath = window.location.pathname;
    const urlParams = new URLSearchParams(window.location.search);
    const bikeid = urlParams.get('bikeid');
    
    let pageType = 'finder';
    if (currentPath.includes('/pages/fit-my-bike') || currentPath.includes('/fit-my-bike')) {
      pageType = bikeid ? 'motorcycle-parts' : 'finder';
    }

    // Initialize the appropriate widget
    if (pageType === 'motorcycle-parts' && bikeid) {
      initializeMotorcyclePage(config, bikeid, container);
    } else {
      initializeFinderPage(config, container);
    }

    // Function to group consecutive years into ranges (e.g., [2020,2021,2022,2024] -> ["2020-2022", "2024"])
    function groupYearsIntoRanges(years) {
      if (years.length === 0) return [];
      
      const ranges = [];
      let rangeStart = years[0];
      let rangeEnd = years[0];
      
      for (let i = 1; i < years.length; i++) {
        const currentYear = years[i];
        const previousYear = years[i - 1];
        
        // Check if current year is consecutive to previous (remembering years are sorted newest first)
        if (previousYear - currentYear === 1) {
          // Consecutive year, extend the range
          rangeEnd = currentYear;
        } else {
          // Non-consecutive, close current range and start new one
          if (rangeStart === rangeEnd) {
            ranges.push(rangeStart.toString());
          } else {
            ranges.push(`${rangeEnd}-${rangeStart}`); // Note: rangeEnd < rangeStart due to newest-first sorting
          }
          rangeStart = currentYear;
          rangeEnd = currentYear;
        }
      }
      
      // Add the final range
      if (rangeStart === rangeEnd) {
        ranges.push(rangeStart.toString());
      } else {
        ranges.push(`${rangeEnd}-${rangeStart}`);
      }
      
      return ranges;
    }

    function initializeFinderPage(config, container) {
      // Load the main motorcycle finder
      fetch(`${config.apiBaseUrl}/api/motorcycles/makes`, { 
        cache: 'no-store', 
        headers: { 'Cache-Control': 'no-cache' } 
      })
        .then(response => {
          if (response.status === 304) {
            // Handle 304 Not Modified - try again with cache reload
            return fetch(`${config.apiBaseUrl}/api/motorcycles/makes`, { cache: 'reload' }).then(r => r.json());
          }
          if (!response.ok) {
            throw new Error(`Finder API failed with status ${response.status}`);
          }
          return response.json();
        })
        .then(makes => {
          container.innerHTML = generateFinderHTML(makes, config);
          setupFinderInteractions(config, container);
        })
        .catch(error => {
          console.error('Error loading finder:', error);
          container.innerHTML = `
            <div class="fmb-native-error">
              <p>Unable to load motorcycle finder. Please try again later.</p>
            </div>
          `;
        });
    }

    function initializeMotorcyclePage(config, bikeid, container) {
      console.log('🔧 FMB Debug: Starting motorcycle page initialization');
      console.log('🔧 FMB Debug: bikeid =', bikeid);
      console.log('🔧 FMB Debug: apiBaseUrl =', config.apiBaseUrl);

      // Show debug info in container
      container.innerHTML = `
        <div style="background: #f8f9fa; border: 1px solid #dee2e6; padding: 15px; margin: 10px 0; font-family: monospace; font-size: 12px;">
          <strong>🔧 FMB Debug Info:</strong><br>
          • bikeid: ${bikeid}<br>
          • apiBaseUrl: ${config.apiBaseUrl}<br>
          • About to call APIs...<br>
        </div>
        <div class="fmb-native-loading">
          <div class="fmb-loading-spinner"></div>
          <p>Loading motorcycle parts...</p>
        </div>
      `;
      
      const url1 = `${config.apiBaseUrl}/api/motorcycles?recid=${bikeid}`;
      const url2 = `${config.apiBaseUrl}/api/customer/motorcycles/${bikeid}/compatible-parts`;
      const url3 = `${config.apiBaseUrl}/api/customer/motorcycles/${bikeid}/sprocket-alternatives`;
      
      console.log('🔧 FMB Debug: Fetching URLs:', url1, url2, url3);
      
      // Load specific motorcycle data, compatible parts, and sprocket alternatives
      Promise.all([
        fetch(url1, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        }).then(r => {
          console.log('🔧 FMB Debug: Motorcycle API response status:', r.status);
          if (r.status === 304) {
            // Handle 304 Not Modified - try again with cache reload
            return fetch(url1, { cache: 'reload' }).then(rr => rr.json());
          }
          if (!r.ok) {
            throw new Error(`Motorcycle API failed with status ${r.status}`);
          }
          return r.json();
        }),
        fetch(url2, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        }).then(r => {
          console.log('🔧 FMB Debug: Parts API response status:', r.status);
          if (r.status === 304) {
            // Handle 304 Not Modified - try again with cache reload
            return fetch(url2, { cache: 'reload' }).then(rr => rr.json());
          }
          if (!r.ok) {
            throw new Error(`Parts API failed with status ${r.status}`);
          }
          return r.json();
        }),
        fetch(url3, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        }).then(r => {
          console.log('🔧 FMB Debug: Alternatives API response status:', r.status);
          if (r.status === 304) {
            // Handle 304 Not Modified - try again with cache reload
            return fetch(url3, { cache: 'reload' }).then(rr => rr.json());
          }
          if (!r.ok) {
            throw new Error(`Alternatives API failed with status ${r.status}`);
          }
          return r.json();
        })
      ])
      .then(([motorcycles, parts, alternatives]) => {
        console.log('🔧 FMB Debug: Received motorcycles:', motorcycles);
        console.log('🔧 FMB Debug: Received parts:', parts);
        console.log('🔧 FMB Debug: Received alternatives:', alternatives);
        console.log('🔧 FMB Debug: Motorcycles type:', typeof motorcycles, 'Length:', Array.isArray(motorcycles) ? motorcycles.length : 'not array');
        console.log('🔧 FMB Debug: Parts type:', typeof parts, 'Length:', Array.isArray(parts) ? parts.length : 'not array');

        // Update debug display
        container.querySelector('.fmb-native-loading').innerHTML = `
          <div style="background: #d4edda; border: 1px solid #c3e6cb; padding: 10px; margin: 5px 0; font-family: monospace; font-size: 11px;">
            ✅ <strong>API Success!</strong><br>
            • Motorcycles: ${Array.isArray(motorcycles) ? motorcycles.length : 'Invalid'}<br>
            • Parts: ${Array.isArray(parts) ? parts.length : 'Invalid'}<br>
            • FCW Alternatives: ${alternatives.frontSprocketAlternatives ? alternatives.frontSprocketAlternatives.length : 0}<br>
            • RCW Alternatives: ${alternatives.rearSprocketAlternatives ? alternatives.rearSprocketAlternatives.length : 0}<br>
            • Rendering layout...<br>
          </div>
        `;
        
        const motorcycle = motorcycles.find(m => m.recid == bikeid);
        console.log('🔧 FMB Debug: Found motorcycle:', motorcycle);
        if (!motorcycle) {
          throw new Error(`Motorcycle with bikeid ${bikeid} not found`);
        }
        
        updateSEOForMotorcycle(motorcycle, parts, bikeid);
        
        container.innerHTML = generateMotorcyclePageHTML(motorcycle, parts, alternatives, config);
        setupPartInteractions(config, container);
      })
      .catch(error => {
        console.error('Error loading motorcycle page:', error);
        container.innerHTML = `
          <div style="background: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; margin: 10px 0;">
            <strong>❌ FMB Debug Error:</strong><br>
            <div style="font-family: monospace; font-size: 12px; margin-top: 10px;">
              Error: ${error.message}<br>
              Stack: ${error.stack ? error.stack.substring(0, 200) + '...' : 'No stack trace'}
            </div>
            <hr style="margin: 10px 0;">
            <p>Unable to load motorcycle parts. Please try again later.</p>
          </div>
        `;
      });
    }

    function updateSEOForMotorcycle(motorcycle, parts, bikeid) {
      // Generate dynamic page title
      const bikeYear = motorcycle.firstyear && motorcycle.lastyear 
        ? (motorcycle.firstyear === motorcycle.lastyear 
            ? motorcycle.firstyear.toString() 
            : `${motorcycle.firstyear}-${motorcycle.lastyear}`)
        : motorcycle.bikeyear || 'Unknown Year';
      
      const pageTitle = `${motorcycle.bikemake} ${motorcycle.bikemodel} ${bikeYear} Motorcycle Parts | Renthal`;
      document.title = pageTitle;
      
      // Update meta description
      const existingMeta = document.querySelector('meta[name="description"]');
      const metaContent = `Find compatible motorcycle parts for ${motorcycle.bikemake} ${motorcycle.bikemodel} (${bikeYear}). ${parts.length} parts available including handlebars, sprockets, chains, brake pads, bar mounts and more.`;
      
      if (existingMeta) {
        existingMeta.setAttribute('content', metaContent);
      } else {
        const meta = document.createElement('meta');
        meta.name = 'description';
        meta.content = metaContent;
        document.head.appendChild(meta);
      }
      
      // Update Open Graph tags
      updateOpenGraphTag('og:title', pageTitle);
      updateOpenGraphTag('og:description', metaContent);
      updateOpenGraphTag('og:url', window.location.href);
      
      // Add structured data for better SEO
      const structuredData = {
        "@context": "https://schema.org",
        "@type": "Product",
        "name": `${motorcycle.bikemake} ${motorcycle.bikemodel} ${bikeYear}`,
        "description": metaContent,
        "category": "Motorcycle Parts",
        "brand": {
          "@type": "Brand",
          "name": motorcycle.bikemake
        },
        "offers": {
          "@type": "AggregateOffer",
          "offerCount": parts.length,
          "priceCurrency": "GBP"
        }
      };
      
      const existingScript = document.getElementById('motorcycle-structured-data');
      if (existingScript) {
        existingScript.textContent = JSON.stringify(structuredData);
      } else {
        const script = document.createElement('script');
        script.type = 'application/ld+json';
        script.id = 'motorcycle-structured-data';
        script.textContent = JSON.stringify(structuredData);
        document.head.appendChild(script);
      }
    }
    
    function updateOpenGraphTag(property, content) {
      const existing = document.querySelector(`meta[property="${property}"]`);
      if (existing) {
        existing.setAttribute('content', content);
      } else {
        const meta = document.createElement('meta');
        meta.setAttribute('property', property);
        meta.setAttribute('content', content);
        document.head.appendChild(meta);
      }
    }

    function generateFinderHTML(makes, config) {
      return `
        <div class="fmb-finder-form">
          <!-- Quick Search Section -->
          <div class="fmb-quick-search">
            <h3>Quick Search</h3>
            <p>Search directly for your motorcycle model</p>
            <div class="fmb-search-input-group">
              <input type="text" id="quick-search-${config.blockId}" class="fmb-search-input" 
                     placeholder="e.g., Honda CRF450R 2023" 
                     autocomplete="off">
              <div id="suggestions-dropdown-${config.blockId}" class="fmb-suggestions-dropdown"></div>
            </div>
          </div>
          
          <!-- Filter Search Section -->
          <h3>Search by Make, Model & Year</h3>
          <p>Select options in order: Make → Model → Year</p>
          <div class="fmb-form-grid">
            <div class="fmb-form-group">
              <label for="make-select-${config.blockId}">1. Make</label>
              <select id="make-select-${config.blockId}" class="fmb-select">
                <option value="">Choose your bike make</option>
                ${makes.map(make => `<option value="${make}">${make}</option>`).join('')}
              </select>
            </div>
            
            <div class="fmb-form-group disabled">
              <label for="model-select-${config.blockId}">2. Model</label>
              <select id="model-select-${config.blockId}" class="fmb-select" disabled>
                <option value="">First select a make</option>
              </select>
            </div>
            
            <div class="fmb-form-group disabled">
              <label for="year-select-${config.blockId}">3. Year</label>
              <select id="year-select-${config.blockId}" class="fmb-select" disabled>
                <option value="">First select make & model</option>
              </select>
            </div>
          </div>
          
          <div id="results-${config.blockId}" class="fmb-finder-results"></div>
        </div>
      `;
    }

    function generateMotorcyclePageHTML(motorcycle, parts, alternatives, config) {
      // Calculate year range  
      const bikeYear = motorcycle.firstyear && motorcycle.lastyear 
        ? (motorcycle.firstyear === motorcycle.lastyear 
            ? motorcycle.firstyear.toString() 
            : `${motorcycle.firstyear}-${motorcycle.lastyear}`)
        : motorcycle.bikeyear || 'Unknown Year';
      
      const engineSize = motorcycle.bikeengine ? `${motorcycle.bikeengine}cc` : '';
      
      // Filter and categorize parts
      const categorizedParts = categorizeParts(parts);
      
      // Generate navigation menu - only show buttons for categories with products
      const navButtons = [];
      if (categorizedParts.handlebars.length > 0) {
        navButtons.push('<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded fmb-nav-btn" onclick="document.getElementById(\'handlebars\').scrollIntoView({behavior: \'smooth\'})">Handlebars</button>');
      }
      if (categorizedParts.frontSprocket.length > 0 || alternatives.frontSprocketAlternatives.length > 0) {
        navButtons.push('<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded fmb-nav-btn" onclick="document.getElementById(\'front-sprocket\').scrollIntoView({behavior: \'smooth\'})">Front Sprocket</button>');
      }
      if (categorizedParts.rearSprockets.length > 0 || alternatives.rearSprocketAlternatives.length > 0) {
        navButtons.push('<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded fmb-nav-btn" onclick="document.getElementById(\'rear-sprockets\').scrollIntoView({behavior: \'smooth\'})">Rear Sprockets</button>');
      }
      if (categorizedParts.chain.length > 0) {
        navButtons.push('<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded fmb-nav-btn" onclick="document.getElementById(\'chain\').scrollIntoView({behavior: \'smooth\'})">Chain</button>');
      }
      if (categorizedParts.brakePads.length > 0) {
        navButtons.push('<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded fmb-nav-btn" onclick="document.getElementById(\'brake-pads\').scrollIntoView({behavior: \'smooth\'})">Brake Pads</button>');
      }
      if (categorizedParts.barMounts.length > 0) {
        navButtons.push('<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded fmb-nav-btn" onclick="document.getElementById(\'bar-mounts\').scrollIntoView({behavior: \'smooth\'})">Bar Mounts</button>');
      }
      if (categorizedParts.driveConversions.length > 0) {
        navButtons.push('<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded fmb-nav-btn" onclick="document.getElementById(\'drive-conversions\').scrollIntoView({behavior: \'smooth\'})">Drive Conversions</button>');
      }
      if (categorizedParts.others.length > 0) {
        navButtons.push('<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded fmb-nav-btn" onclick="document.getElementById(\'others\').scrollIntoView({behavior: \'smooth\'})">Others</button>');
      }
      
      const navigationMenu = navButtons.length > 0 ? `
        <div class="fmb-navigation">
          <nav class="fmb-nav-buttons">
            ${navButtons.join('\n            ')}
          </nav>
        </div>
      ` : '';
      
      return `
        <div class="fmb-motorcycle-page">
          <div class="fmb-motorcycle-header">
            <h1>${motorcycle.bikemake} ${motorcycle.bikemodel} (${getBikeTypeLabel(motorcycle.biketype)}) ${bikeYear}</h1>
            <button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded fmb-nav-btn" 
  onclick="location.href='/pages/fit-my-bike';">Return to Search</button>
          </div>
          
          ${navigationMenu}
          
          <div class="fmb-parts-content">
            ${generateDirectReplacementSection(categorizedParts, motorcycle)}
            ${generateCategorySectionDynamic('handlebars', categorizedParts.handlebars)}
            ${generateCategorySectionDynamic('front-sprocket', categorizedParts.frontSprocket, alternatives.frontSprocketAlternatives)}
            ${generateCategorySectionDynamic('rear-sprockets', categorizedParts.rearSprockets, alternatives.rearSprocketAlternatives)}
            ${generateCategorySectionDynamic('chain', categorizedParts.chain)}
            ${generateCategorySectionDynamic('brake-pads', categorizedParts.brakePads)}
            ${generateCategorySectionDynamic('bar-mounts', categorizedParts.barMounts)}
            ${generateCategorySectionDynamic('drive-conversions', categorizedParts.driveConversions)}
            ${generateCategorySectionDynamic('others', categorizedParts.others)}
          </div>
        </div>
      `;
    }
    
    function categorizeParts(parts) {
      const categorized = {
        handlebars: [],
        frontSprocket: [],
        rearSprockets: [],
        chain: [],
        brakePads: [],
        barMounts: [],
        driveConversions: [],
        others: []
      };
      
      parts.forEach(part => {
        // Use admin category from API response if available
        const adminCategory = part.adminCategory || 'others';
        
        // Map admin categories to categorized structure
        if (adminCategory === 'handlebars') {
          categorized.handlebars.push(part);
        } else if (adminCategory === 'frontSprocket') {
          categorized.frontSprocket.push(part);
        } else if (adminCategory === 'rearSprockets') {
          categorized.rearSprockets.push(part);
        } else if (adminCategory === 'chain') {
          categorized.chain.push(part);
        } else if (adminCategory === 'brakePads') {
          categorized.brakePads.push(part);
        } else if (adminCategory === 'barMounts') {
          categorized.barMounts.push(part);
        } else if (adminCategory === 'driveConversions') {
          categorized.driveConversions.push(part);
        } else {
          categorized.others.push(part);
        }
      });
      
      return categorized;
    }
    
    // Function to get category name and order for a part using admin categories
    function getCategoryInfo(part, categorizedParts) {
      const adminCategory = part.adminCategory || 'others';
      const adminCategoryLabel = part.adminCategoryLabel || 'Others';
      
      if (categorizedParts.handlebars.includes(part)) {
        return { name: adminCategoryLabel, order: 1, categoryParts: categorizedParts.handlebars };
      } else if (categorizedParts.frontSprocket.includes(part)) {
        return { name: adminCategoryLabel, order: 2, categoryParts: categorizedParts.frontSprocket };
      } else if (categorizedParts.rearSprockets.includes(part)) {
        return { name: adminCategoryLabel, order: 3, categoryParts: categorizedParts.rearSprockets };
      } else if (categorizedParts.chain.includes(part)) {
        return { name: adminCategoryLabel, order: 4, categoryParts: categorizedParts.chain };
      } else if (categorizedParts.brakePads.includes(part)) {
        return { name: adminCategoryLabel, order: 5, categoryParts: categorizedParts.brakePads };
      } else if (categorizedParts.barMounts.includes(part)) {
        return { name: adminCategoryLabel, order: 6, categoryParts: categorizedParts.barMounts };
      } else if (categorizedParts.driveConversions.includes(part)) {
        return { name: adminCategoryLabel, order: 7, categoryParts: categorizedParts.driveConversions };
      } else {
        return { name: adminCategoryLabel, order: 8, categoryParts: categorizedParts.others };
      }
    }

    function generateDirectReplacementSection(categorizedParts, motorcycle) {
      // Get all compatible parts
      const allParts = [
        ...categorizedParts.handlebars,
        ...categorizedParts.frontSprocket,
        ...categorizedParts.rearSprockets,
        ...categorizedParts.chain,
        ...categorizedParts.brakePads,
        ...categorizedParts.barMounts,
        ...categorizedParts.driveConversions,
        ...categorizedParts.others
      ];
      
      // Filter to only show OE (Original Equipment) parts that match motorcycle's oe_ columns
      const oePartSkus = [];
      if (motorcycle.oe_handlebar) oePartSkus.push(motorcycle.oe_handlebar);
      if (motorcycle.oe_fcw) oePartSkus.push(motorcycle.oe_fcw);
      if (motorcycle.oe_rcw) oePartSkus.push(motorcycle.oe_rcw);
      if (motorcycle.oe_barmount) oePartSkus.push(motorcycle.oe_barmount);
      if (motorcycle.oe_chain) oePartSkus.push(motorcycle.oe_chain);
      if (motorcycle.front_brakepads) oePartSkus.push(motorcycle.front_brakepads);
      if (motorcycle.rear_brakepads) oePartSkus.push(motorcycle.rear_brakepads);
      
      // Filter parts to only include those with SKUs that match OE part values
      const oeOnlyParts = allParts.filter(part => {
        // Check main product SKU
        if (oePartSkus.includes(part.sku)) {
          return true;
        }
        
        // Check variant SKUs
        if (part.variants) {
          try {
            const variants = JSON.parse(part.variants);
            return variants.some(variant => oePartSkus.includes(variant.sku));
          } catch (e) {
            return false;
          }
        }
        
        return false;
      });
      
      if (oeOnlyParts.length === 0) {
        return '<div class="fmb-no-parts"><p>No Renthal parts found for this motorcycle.</p></div>';
      }
      
      return `
        <div class="fmb-direct-replacement">
          <h2>Direct Replacement</h2>
          <div class="fmb-parts-table">
            <table style="width: 100%; border-collapse: collapse; margin: 20px 0;">
              <thead>
                <tr>
                  <th>Category</th>
                  <th>Part Number</th>
                  <th>Description</th>
                  <th>Add to Cart</th>
                  <th>More Options</th>
                </tr>
              </thead>
              <tbody>
                ${oeOnlyParts
                  .map(part => ({ ...part, categoryInfo: getCategoryInfo(part, categorizedParts) }))
                  .sort((a, b) => a.categoryInfo.order - b.categoryInfo.order)
                  .map(part => {
                    const categoryInfo = part.categoryInfo;
                    const moreOptionsCount = categoryInfo.categoryParts.length - 1;
                    const categoryId = categoryInfo.name.toLowerCase().replace(/\s+/g, '-');
                    
                    return `
                      <tr>
                        <td>${categoryInfo.name}</td>
                        <td>${part.sku}</td>
                        <td>
                            <a href="${part.url}">${part.title}</a>
                        </td>
                        <td >
                          <button class="fmb-nav-btn fmb-add-to-cart-btn" data-variant-id="${part.variants[0]?.id}">Add to Cart</button>
                        </td>
                        <td>
                          ${moreOptionsCount > 0 ? 
                            `<a href="#${categoryId}">View ${moreOptionsCount} more</a>` : 
                            '<span style="color: #999;">-</span>'
                          }
                        </td>
                      </tr>
                    `;
                  }).join('')}
              </tbody>
            </table>
          </div>
        </div>
      `;
    }
    
    function generateCategorySection(id, title, parts) {
      if (parts.length === 0) return '';
      
      // Separate OE parts and alternatives
      const oeParts = parts.filter(p => !p.isAlternative);
      const alternativeParts = parts.filter(p => p.isAlternative);
      
      return `
        <div id="${id}" class="fmb-category-section">
          <h3>${id}</h3>
          <div class="fmb-parts-grid">
            ${oeParts.map(part => `
              <div class="fmb-parts-card">
                <div class="fmb-parts-card-title">${title}</div>
                <h4><a href="${part.url}">${part.title}</a></h4>
                <p><strong>SKU:</strong> ${part.sku}</p>
                <button class="fmb-add-to-cart-btn fmb-nav-btn" data-variant-id="${part.variants[0]?.id}">Add to Cart</button>
              </div>
            `).join('')}
            ${alternativeParts.length > 0 ? `
              ${alternativeParts.map(part => `
                <div class="fmb-parts-card" style="border: 2px solid #28a745; position: relative;">
                  <div style="position: absolute; top: 5px; right: 5px; background: #28a745; color: white; padding: 2px 8px; border-radius: 4px; font-size: 11px; font-weight: bold;">
                    Alternative
                  </div>
                  <div class="fmb-parts-card-title">${title}</div>
                  <h4><a href="${part.url}">${part.title}</a></h4>
                  <p><strong>SKU:</strong> ${part.sku}</p>
                  <button class="fmb-add-to-cart-btn fmb-nav-btn" data-variant-id="${part.variants[0]?.id}">Add to Cart</button>
                </div>
              `).join('')}
            ` : ''}
          </div>
        </div>
      `;
    }

    // Dynamic category section that uses adminCategoryLabel from parts
    function generateCategorySectionDynamic(id, parts, alternatives = []) {
      if (parts.length === 0 && alternatives.length === 0) return '';
      
      // Get the category label from the first part (all parts in a section should have the same category)
      const categoryLabel = parts[0]?.adminCategoryLabel || id.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      
      // Combine OE parts and alternatives for display
      const allParts = [...parts];
      
      // Add alternatives with special marking
      alternatives.forEach(alt => {
        allParts.push({
          ...alt,
          isAlternative: true
        });
      });
      
      return generateCategorySection(id, categoryLabel, allParts);
    }

    function searchMotorcycles(motorcycleData, query) {
      const searchTerm = query.toLowerCase().trim();
      if (!searchTerm) return [];
      
      // Check if it's a direct RECID search
      if (/^\d+$/.test(searchTerm)) {
        const recid = parseInt(searchTerm);
        const directMatch = motorcycleData.find(bike => bike.recid === recid);
        if (directMatch) return [directMatch];
      }
      
      // Extract years from search query (4-digit numbers between 1900-2099)
      const yearMatches = searchTerm.match(/\b(19\d{2}|20\d{2})\b/g);
      const searchYears = yearMatches ? yearMatches.map(y => parseInt(y)) : [];
      
      // Split search into words for multi-word matching
      const words = searchTerm.split(/\s+/).filter(word => word.length > 0);
      if (words.length === 0) return [];
      
      return motorcycleData.filter(bike => {
        // Normalize spaces for better matching (handles "rm100" matching "RM 100")
        const normalizedMake = bike.bikemake.toLowerCase().replace(/\s+/g, '');
        const normalizedModel = bike.bikemodel.toLowerCase().replace(/\s+/g, '');
        const normalizedSearchTerm = searchTerm.replace(/\s+/g, '');
        
        // Direct normalized match (for cases like "rm100" vs "RM 100")
        if (normalizedMake.includes(normalizedSearchTerm) || normalizedModel.includes(normalizedSearchTerm)) {
          return true;
        }
        
        // Multi-word search: all words must match some part of the bike info
        return words.every(word => {
          // Check if the word is a year we extracted
          const wordAsYear = parseInt(word);
          if (searchYears.includes(wordAsYear)) {
            // Year matching: check if it falls within the bike's production range
            if (bike.firstyear && bike.lastyear) {
              return wordAsYear >= bike.firstyear && wordAsYear <= bike.lastyear;
            } else if (bike.bikeyear) {
              return wordAsYear === bike.bikeyear;
            }
            return false;
          }
          
          // Non-year word matching
          return bike.bikemake.toLowerCase().includes(word) ||
                 bike.bikemodel.toLowerCase().includes(word) ||
                 (bike.bikeengine && bike.bikeengine.toString().includes(word));
        });
      }).sort((a, b) => {
        // Sort by relevance: exact matches first, then by make/model
        const aRelevance = getSearchRelevance(a, searchTerm);
        const bRelevance = getSearchRelevance(b, searchTerm);
        if (aRelevance !== bRelevance) return bRelevance - aRelevance;
        
        // Secondary sort by make, then model, then year
        if (a.bikemake !== b.bikemake) return a.bikemake.localeCompare(b.bikemake);
        if (a.bikemodel !== b.bikemodel) return a.bikemodel.localeCompare(b.bikemodel);
        return (b.firstyear || b.bikeyear || 0) - (a.firstyear || a.bikeyear || 0);
      });
    }
    
    function getSearchRelevance(bike, searchTerm) {
      const make = bike.bikemake.toLowerCase();
      const model = bike.bikemodel.toLowerCase();
      const term = searchTerm.toLowerCase();
      
      // Exact make + model match = highest relevance
      if (`${make} ${model}`.includes(term)) return 3;
      
      // Make or model starts with term = high relevance  
      if (make.startsWith(term) || model.startsWith(term)) return 2;
      
      // Make or model contains term = medium relevance
      if (make.includes(term) || model.includes(term)) return 1;
      
      // Any other match = low relevance
      return 0;
    }

    function setupFinderInteractions(config, container) {
      const quickSearch = container.querySelector(`#quick-search-${config.blockId}`);
      const suggestionsDropdown = container.querySelector(`#suggestions-dropdown-${config.blockId}`);
      const makeSelect = container.querySelector(`#make-select-${config.blockId}`);
      const modelSelect = container.querySelector(`#model-select-${config.blockId}`);
      const yearSelect = container.querySelector(`#year-select-${config.blockId}`);
      const results = container.querySelector(`#results-${config.blockId}`);

      let motorcycleData = [];

      // Load all motorcycle data for quick search
      fetch(`${config.apiBaseUrl}/api/motorcycles`, { 
        cache: 'no-store', 
        headers: { 'Cache-Control': 'no-cache' } 
      })
        .then(response => response.json())
        .then(motorcycles => {
          motorcycleData = motorcycles;
        })
        .catch(error => console.error('Error loading motorcycles:', error));

      // Quick search functionality
      let searchTimeout;
      quickSearch.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();
        
        if (query.length < 2) {
          suggestionsDropdown.style.display = 'none';
          return;
        }
        
        searchTimeout = setTimeout(() => {
          const matches = searchMotorcycles(motorcycleData, query).slice(0, 10);
          
          if (matches.length > 0) {
            suggestionsDropdown.innerHTML = matches.map(bike => {
              const yearRange = bike.firstyear === bike.lastyear ? 
                bike.firstyear : 
                `${bike.firstyear}-${bike.lastyear}`;
              return `<div class="fmb-suggestion-item" data-bikeid="${bike.recid}">
                ${bike.bikemake} ${bike.bikemodel} (${yearRange})
              </div>`;
            }).join('');
            suggestionsDropdown.style.display = 'block';
          } else {
            suggestionsDropdown.style.display = 'none';
          }
        }, 300);
      });

      // Handle suggestion clicks
      suggestionsDropdown.addEventListener('click', function(e) {
        if (e.target.classList.contains('fmb-suggestion-item')) {
          const bikeid = e.target.getAttribute('data-bikeid');
          window.location.href = `/pages/fit-my-bike/?bikeid=${bikeid}`;
        }
      });

      // Hide suggestions when clicking outside
      document.addEventListener('click', function(e) {
        if (!quickSearch.contains(e.target) && !suggestionsDropdown.contains(e.target)) {
          suggestionsDropdown.style.display = 'none';
        }
      });

      // Make selection handler
      makeSelect.addEventListener('change', function() {
        const selectedMake = this.value;
        modelSelect.disabled = true;
        yearSelect.disabled = true;
        modelSelect.innerHTML = '<option value="">Choose your bike model</option>';
        yearSelect.innerHTML = '<option value="">Choose your bike year</option>';
        results.innerHTML = '';

        if (!selectedMake) return;

        fetch(`${config.apiBaseUrl}/api/motorcycles?bikemake=${encodeURIComponent(selectedMake)}`, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        })
          .then(response => response.json())
          .then(motorcycles => {
            // Extract unique models from motorcycles
            const models = [...new Set(motorcycles.map(m => m.bikemodel))].sort();
            models.forEach(model => {
              const option = document.createElement('option');
              option.value = model;
              option.textContent = model;
              modelSelect.appendChild(option);
            });
            modelSelect.disabled = false;
            modelSelect.closest('.fmb-form-group').classList.remove('disabled');
          })
          .catch(error => {
            console.error('Error loading models:', error);
            modelSelect.innerHTML = '<option value="">Error loading models</option>';
          });
      });

      // Model selection handler
      modelSelect.addEventListener('change', function() {
        const selectedMake = makeSelect.value;
        const selectedModel = this.value;
        yearSelect.disabled = true;
        yearSelect.innerHTML = '<option value="">Choose your bike year</option>';
        results.innerHTML = '';

        if (!selectedMake || !selectedModel) return;

        fetch(`${config.apiBaseUrl}/api/motorcycles?bikemake=${encodeURIComponent(selectedMake)}`, { 
          cache: 'no-store', 
          headers: { 'Cache-Control': 'no-cache' } 
        })
          .then(response => response.json())
          .then(motorcycles => {
            // Filter motorcycles by model - keep each bike separate
            const filteredMotorcycles = motorcycles.filter(m => 
              m.bikemodel.toLowerCase() === selectedModel.toLowerCase()
            );
            
            // Sort by year (newest first), then by capacity descending
            filteredMotorcycles.sort((a, b) => {
              if (b.firstyear !== a.firstyear) return b.firstyear - a.firstyear;
              return (b.capacity || 0) - (a.capacity || 0);
            });
            
            // Create a separate option for each motorcycle
            filteredMotorcycles.forEach(motorcycle => {
              const option = document.createElement('option');
              // Store the recid as the value, not the year
              option.value = motorcycle.recid;
              
              // Display year range only
              const yearDisplay = motorcycle.firstyear === motorcycle.lastyear 
                ? motorcycle.firstyear 
                : `${motorcycle.firstyear}-${motorcycle.lastyear}`;
              
              option.textContent = yearDisplay;
              
              yearSelect.appendChild(option);
            });
            
            yearSelect.disabled = false;
            yearSelect.closest('.fmb-form-group').classList.remove('disabled');
          })
          .catch(error => {
            console.error('Error loading years:', error);
            yearSelect.innerHTML = '<option value="">Error loading years</option>';
          });
      });

      // Year selection handler - redirect directly to the selected motorcycle (recid is in the value)
      yearSelect.addEventListener('change', function() {
        const selectedRecid = this.value;

        if (!selectedRecid) {
          return;
        }

        // Redirect directly to the motorcycle's page using its recid
        window.location.href = `/pages/fit-my-bike/?bikeid=${selectedRecid}`;
      });
    }


    function setupPartInteractions(config, container) {
      // Handle add to cart buttons
      container.addEventListener('click', function(e) {
        const addToCartBtn = e.target.closest('.fmb-add-to-cart-btn');
        if (!addToCartBtn) return;

        const variantId = addToCartBtn.getAttribute('data-variant-id');
        if (!variantId) {
          console.error('No variant ID found for add to cart button');
          return;
        }

        // Disable button and show loading state
        addToCartBtn.disabled = true;
        const originalText = addToCartBtn.textContent;
        addToCartBtn.textContent = 'Adding...';

        // Add to cart via Shopify Cart API
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1
          })
        })
        .then(response => response.json())
        .then(data => {
          addToCartBtn.textContent = 'Added!';
          addToCartBtn.style.background = '#28a745';
          
          // Trigger cart refresh events
          if (window.Shopify && window.Shopify.onItemAdded) {
            window.Shopify.onItemAdded();
          }
          
          // Dispatch custom event for theme integrations
          window.dispatchEvent(new CustomEvent('cart:item-added', {
            detail: { variant_id: variantId, quantity: 1 }
          }));
          
          // Reset button after 2 seconds
          setTimeout(() => {
            addToCartBtn.textContent = originalText;
            addToCartBtn.disabled = false;
            addToCartBtn.style.background = '';
          }, 2000);
        })
        .catch(error => {
          console.error('Error adding to cart:', error);
          addToCartBtn.disabled = false;
          addToCartBtn.textContent = 'Error - Try Again';
          addToCartBtn.style.background = '#dc3545';
          
          // Reset button after 3 seconds
          setTimeout(() => {
            addToCartBtn.textContent = originalText;
            addToCartBtn.style.background = '';
          }, 3000);
        });
      });
      
      // Handle navigation menu smooth scrolling
      container.addEventListener('click', function(e) {
        if (e.target.closest('.fmb-navigation a[href^="#"]')) {
          e.preventDefault();
          const targetId = e.target.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth' });
          }
        }
      });
    }
  });
</script>

{% schema %}
{
  "name": "Native Bike Parts Finder",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Content Settings"
    },
    {
      "type": "text",
      "id": "widget_title",
      "label": "Widget Title",
      "default": "Find Your Motorcycle Parts"
    },
    {
      "type": "textarea",
      "id": "widget_description",
      "label": "Widget Description",
      "default": "Search for compatible parts for your motorcycle"
    },
    {
      "type": "checkbox",
      "id": "show_header",
      "label": "Show Header",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "auto_detect_page",
      "label": "Auto-detect Page Type",
      "info": "Automatically detect if this is a finder or parts page based on URL parameters",
      "default": true
    },
    {
      "type": "header",
      "content": "Configuration"
    },
    {
      "type": "url",
      "id": "api_base_url",
      "label": "API Base URL",
      "info": "Leave blank to use app proxy automatically"
    }
  ]
}
{% endschema %}